% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/particle_filter_state_nested.R
\name{particle_filter_state_nested}
\alias{particle_filter_state_nested}
\title{Nested particle filter state}
\description{
Nested particle filter internal state. This object is not
ordinarily constructed directly by users, but via the
\verb{$run_begin} method to \link{particle_filter}. It provides
an advanced interface to the particle filter that allows
partially running the particle filter over part of the time
trajectory.

This state object has a number of public fields that you can read
but must not write (they are not read-only so you \emph{could} write
them, but don't).
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model}}{The dust model generator being simulated (cannot be
re-bound)}

\item{\code{history}}{The particle history, if created with
\code{save_history = TRUE}. This is an internal format subject to}

\item{\code{restart_state}}{Full model state at a series of points in
time, if the model was created with non-\code{NULL} \code{save_restart}.
This is a 4d array as described in \link{particle_filter}}

\item{\code{log_likelihood}}{The log-likelihood so far. This starts at
0 when initialised and accumulates value for each step taken.}

\item{\code{log_likelihood_step}}{The log-likelihood attributable to the
last step (i.e., the contribution to \code{log_likelihood} made on the
last call to \verb{$step()}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{particle_filter_state_nested$new()}}
\item \href{#method-run}{\code{particle_filter_state_nested$run()}}
\item \href{#method-step}{\code{particle_filter_state_nested$step()}}
\item \href{#method-fork}{\code{particle_filter_state_nested$fork()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialise the particle filter state. Ordinarily
this should not be called by users, and so arguments are not
documented.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter_state_nested$new(
  pars,
  generator,
  model,
  data,
  data_split,
  steps,
  n_particles,
  n_threads,
  initial,
  index,
  compare,
  seed,
  save_history,
  save_restart
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Run the particle filter to the end of the data. This is
a convenience function around \verb{$step()} which provides the correct
value of \code{step_index}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter_state_nested$run()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-step"></a>}}
\if{latex}{\out{\hypertarget{method-step}{}}}
\subsection{Method \code{step()}}{
Take a step with the particle filter. This moves
the particle filter forward one step within the \emph{data} (which
may correspond to more than one step with your model) and
returns the likelihood so far.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter_state_nested$step(step_index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step_index}}{The step \emph{index} to move to. This is not the same
as the model step, nor time, so be careful (it's the index within
the data provided to the filter). It is an error to provide
a value here that is lower than the current step index, or past
the end of the data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fork"></a>}}
\if{latex}{\out{\hypertarget{method-fork}{}}}
\subsection{Method \code{fork()}}{
Create a new \code{particle_filter_state_nested} object based
on this one (same model, position in time within the data) but
with new parameters. To do this, we create a new
\code{particle_filter_state_nested} with new parameters at the beginning of
the simulation (corresponding to the start of your data or the
\code{initial} argument to \link{particle_filter}) with your new
\code{pars}, and then run the filter foward in time until it reaches
the same step as the parent model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_filter_state_nested$fork(pars)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pars}}{New model parameters}
}
\if{html}{\out{</div>}}
}
}
}
