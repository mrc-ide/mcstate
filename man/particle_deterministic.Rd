% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deterministic.R
\name{particle_deterministic}
\alias{particle_deterministic}
\title{Deterministic particle likelihood}
\description{
Create a deterministic version of the
\code{\link{particle_filter}} object, which runs a single
particle deterministically.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model}}{The dust model generator being simulated (cannot be
re-bound)}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{particle_deterministic$new()}}
\item \href{#method-run}{\code{particle_deterministic$run()}}
\item \href{#method-run_many}{\code{particle_deterministic$run_many()}}
\item \href{#method-run_begin}{\code{particle_deterministic$run_begin()}}
\item \href{#method-state}{\code{particle_deterministic$state()}}
\item \href{#method-history}{\code{particle_deterministic$history()}}
\item \href{#method-restart_state}{\code{particle_deterministic$restart_state()}}
\item \href{#method-inputs}{\code{particle_deterministic$inputs()}}
\item \href{#method-set_n_threads}{\code{particle_deterministic$set_n_threads()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create the particle filter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$new(
  data,
  model,
  compare,
  index = NULL,
  initial = NULL,
  n_threads = 1L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{The data set to be used for the particle filter,
created by \code{\link[=particle_filter_data]{particle_filter_data()}}. This is essentially
a \code{\link[=data.frame]{data.frame()}} with at least columns \code{step_start}
and \code{step_end}, along with any additional data used in the
\code{compare} function, and additional information about how your
steps relate to time.}

\item{\code{model}}{A stochastic model to use.  Must be a
\code{dust_generator} object.}

\item{\code{compare}}{A comparison function.  Must take arguments
\code{state}, \code{observed} and \code{pars} as arguments (though the arguments
may have different names). \code{state} is the simulated model state
(a matrix with as many rows as there are state variables and as
many columns as there are particles, \code{data}
is a \code{list} of observed data corresponding to the current
time's row in the \code{data} object provided here in the
constructor.  \code{pars} is any additional parameters passed
through to the comparison function (via the \code{pars}
argument to \verb{$run}).}

\item{\code{index}}{An index function. This is used to compute the
"interesting" indexes of your model. It must be a function of
one argument, which will be the result of calling the
\verb{$info()} method on your model. It should return a list
with elements \code{run} (indices to return at the end of each
run, passed through to your compare function) and \code{state}
(indices to return if saving state). These indices can overlap
but do not have to. This argument is optional but using it will
likely speed up your simulation if you have more than a few
states as it will reduce the amount of memory copied back and
forth.}

\item{\code{initial}}{A function to generate initial conditions. If
given, then this function must accept 3 arguments: \code{info}
(the result of calling \verb{$info()} as for \code{index}),
\code{n_particles} (the number of particles that the particle
filter is using) and \code{pars} (parameters passed in in the
\verb{$run} method via the \code{pars} argument).  It
must return a list, which can have the elements \code{state}
(initial model state, passed to the particle filter - either a
vector or a matrix, and overriding the initial conditions
provided by your model) and \code{step} (the initial step,
overriding the first step of your data - this must occur within
your first epoch in your \code{data} provided to the
constructor, i.e., not less than the first element of
\code{step_start} and not more than \code{step_end}). Your function
can also return a vector or matrix of \code{state} and not alter
the starting step, which is equivalent to returning
\code{list(state = state, step = NULL)}.}

\item{\code{n_threads}}{Number of threads to use when running the
simulation. Defaults to 1, and should not be set higher than the
number of cores available to the machine. This currently has no
effect as the simulation will be run in serial on a single
particle for now.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Run the deterministic particle filter
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$run(
  pars = list(),
  save_history = FALSE,
  save_restart = NULL,
  min_log_likelihood = -Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pars}}{A list representing parameters. This will be passed as
the \code{pars} argument to your model, to your \code{compare}
function, and (if using) to your \code{initial} function. It must
be an R list (not vector or \code{NULL}) because that is what a
dust model currently requires on initialisation or \verb{$reset} - we
may relax this later. You may want to put your observation and
initial parameters under their own keys (e.g.,
\code{pars$initial$whatever}), but this is up to you. Extra keys
are silently ignored by dust models.}

\item{\code{save_history}}{Logical, indicating if the history of all
particles should be saved. If saving history, then it can be
queried later with the \verb{$history} method on the object.}

\item{\code{save_restart}}{An integer vector of time points to save
restart infomation for. Not currently supported.}

\item{\code{min_log_likelihood}}{Not currently supported, exists to match
the inteface with \link{particle_filter}. Providing a value
larger than -Inf will cause an error.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A single numeric value representing the log-likelihood
(\code{-Inf} if the model is impossible)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_many"></a>}}
\if{latex}{\out{\hypertarget{method-run_many}{}}}
\subsection{Method \code{run_many()}}{
Run the deterministic particle filter on several
parameter sets simultaneously. This acts as a wrapper around
\verb{$run()}, though runs will be in parallel if the object was created
with \code{n_threads} greater than 1.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$run_many(
  pars,
  save_history = FALSE,
  save_restart = NULL,
  min_log_likelihood = -Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pars}}{A list of parameter sets, each element of which would
be suitable to pass to \verb{$run()}}

\item{\code{save_history}}{Logical, indicating if the history of all
particles should be saved.}

\item{\code{save_restart}}{An integer vector of time points to save
restart infomation for. Not currently supported.}

\item{\code{min_log_likelihood}}{Not currently supported, exists to match
the inteface with \link{particle_filter}. Providing a value
larger than -Inf will cause an error.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric vector of values representing the log-likelihood
(\code{-Inf} if the model is impossible), one per parameter set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_begin"></a>}}
\if{latex}{\out{\hypertarget{method-run_begin}{}}}
\subsection{Method \code{run_begin()}}{
Begin a deterministic run. This is part of the
"advanced" interface; typically you will want to use \verb{$run()}
or \verb{$run_many()} which provide a user-facing wrapper around
this function. Once created with \verb{$run_begin()}, you should take
as many steps as needed with \verb{$step()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$run_begin(
  pars,
  save_history = FALSE,
  save_restart = NULL,
  min_log_likelihood = -Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pars}}{A list representing parameters. See \verb{$run_many()}
for details (and \emph{not} \verb{$run()})}

\item{\code{save_history}}{Logical, indicating if the history of all
particles should be saved. See \verb{$run()} for details.}

\item{\code{save_restart}}{Times to save restart state at. See \verb{$run()} for
details.}

\item{\code{min_log_likelihood}}{Not currently supported, exists to match
the inteface with \link{particle_filter}. Providing a value
larger than -Inf will cause an error.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of class \code{particle_deterministic_state}, with methods
\code{step} and \code{end}. This interface is still subject to change.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-state"></a>}}
\if{latex}{\out{\hypertarget{method-state}{}}}
\subsection{Method \code{state()}}{
Extract the current model state, optionally filtering.
If the model has not yet been run, then this method will throw an
error. Returns a matrix with the number of rows being the number of
model states, and the number of columns being the number of
particles.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$state(index_state = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_state}}{Optional vector of states to extract}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-history"></a>}}
\if{latex}{\out{\hypertarget{method-history}{}}}
\subsection{Method \code{history()}}{
Extract the particle trajectories. Requires that
the model was run with \code{save_history = TRUE}, which does
incur a performance cost. This method will throw an error if
the model has not run, or was run without \code{save_history = TRUE}. Returns a 3d array with dimensions corresponding to (1)
model state, filtered by \code{index$run} if provided, (2)
particle (following \code{index_particle} if provided), (3)
time point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$history(index_particle = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_particle}}{Optional vector of particle indices to return.
If \code{NULL} we return all particles' histories.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-restart_state"></a>}}
\if{latex}{\out{\hypertarget{method-restart_state}{}}}
\subsection{Method \code{restart_state()}}{
Return the full particle filter state at points back in time
that were saved with the \code{save_restart} argument to
\verb{$run()}. If available, this will return a 3d array, with
dimensions representing (1) particle state, (2) particle index,
(3) time point. If nested parameters are used then returns a 4d array,
with dimensions representing (1) particle state, (2) particle index,
(3) population, (4) time point. This could be quite large, especially
if you are using the \code{index} argument to create the particle filter
and return a subset of all state generally. In the stochastic version,
this is different the saved trajectories returned by \verb{$history()}
because earlier saved state is not filtered by later filtering,
but in the deterministic model we run with a single particle so it
\emph{is} the same.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$restart_state(index_particle = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index_particle}}{Optional vector of particle indices to return.
If \code{NULL} we return all particles' states. Practically because the
only valid value of index_particle is "1", this has no effect and
it is included primarily for compatibility with the stochastic
interface.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inputs"></a>}}
\if{latex}{\out{\hypertarget{method-inputs}{}}}
\subsection{Method \code{inputs()}}{
Return a list of inputs used to configure the deterministic particle
filter. These correspond directly to the argument names for the
constructor and are the same as the input arguments.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$inputs()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_n_threads"></a>}}
\if{latex}{\out{\hypertarget{method-set_n_threads}{}}}
\subsection{Method \code{set_n_threads()}}{
Set the number of threads used by the particle filter (and dust
model) after creation. This can be used to allocate additional
(or subtract excess) computing power from the deterministic filter
Returns (invisibly) the previous value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{particle_deterministic$set_n_threads(n_threads)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n_threads}}{The new number of threads to use. You may want to
wrap this argument in \code{\link[dust:dust_openmp_threads]{dust::dust_openmp_threads()}} in order to
verify that you can actually use the number of threads
requested (based on environment variables and OpenMP support).}
}
\if{html}{\out{</div>}}
}
}
}
